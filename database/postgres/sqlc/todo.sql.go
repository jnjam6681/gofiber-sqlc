// Code generated by sqlc. DO NOT EDIT.
// source: todo.sql

package postgres

import (
	"context"
)

const createTodo = `-- name: CreateTodo :one
INSERT INTO todo (
  name
) VALUES (
  $1
) RETURNING id, name, complate, created_at
`

func (q *Queries) CreateTodo(ctx context.Context, name string) (Todo, error) {
	row := q.db.QueryRowContext(ctx, createTodo, name)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Complate,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTodo = `-- name: DeleteTodo :exec
DELETE FROM todo
WHERE id = $1
`

func (q *Queries) DeleteTodo(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTodo, id)
	return err
}

const getTodo = `-- name: GetTodo :one
SELECT id, name, complate, created_at FROM todo
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTodo(ctx context.Context, id int64) (Todo, error) {
	row := q.db.QueryRowContext(ctx, getTodo, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Complate,
		&i.CreatedAt,
	)
	return i, err
}

const listTodos = `-- name: ListTodos :many
SELECT id, name, complate, created_at FROM todo
ORDER BY created_at
`

func (q *Queries) ListTodos(ctx context.Context) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, listTodos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Complate,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTodo = `-- name: UpdateTodo :one
UPDATE todo
SET complate = $2
WHERE id = $1
RETURNING id, name, complate, created_at
`

type UpdateTodoParams struct {
	ID       int64 `json:"id"`
	Complate bool  `json:"complate"`
}

func (q *Queries) UpdateTodo(ctx context.Context, arg UpdateTodoParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, updateTodo, arg.ID, arg.Complate)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Complate,
		&i.CreatedAt,
	)
	return i, err
}
